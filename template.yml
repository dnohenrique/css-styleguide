AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Environment:
    Type: String
  Repo:
    Type: String
  Tag:
    Type: String
  Owner:
    Type: String
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
      - Name: api
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repo}:${Tag}'
        Cpu: 32
        Memory: 512
        MemoryReservation: 64
        PortMappings:
        - ContainerPort: 80
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: !Ref AWS::Region
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: !Ref AWS::StackName
      Cluster: !Sub 'platform-${Owner}'
      DesiredCount: 1
      Role: !Ref ServiceRole
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: api
        ContainerPort: 80
        TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref AWS::StackName
      VpcId: !ImportValue platform-vpc
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      - Key: Owner
        Value: !Ref Owner
      - Key: Environment
        Value: !Ref Environment
  AllocateAlbPriority:
    Type: Custom::AllocateAlbPriority
    Properties:
      ServiceToken: !ImportValue platform-custom-resources-allocate-alb-priority-arn
      ListenerArn:
        Fn::ImportValue: !Sub platform-${Owner}-public-alb-http-listener
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub platform-${Owner}-public-alb-http-listener
      Priority: !GetAtt AllocateAlbPriority.Priority
      Conditions:
      - Field: host-header
        Values:
        - !Sub '${AWS::StackName}.platform.ferias.in'
      Actions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
  PublicDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue platform-public-hosted-zone
      Name: !Sub '${AWS::StackName}.platform.ferias.in'
      ResourceRecords:
      - Fn::ImportValue: !Sub 'platform-${Owner}-public-alb-dnsname'
      TTL: 300
      Type: CNAME
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-service'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - 'ecs.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-service'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:AuthorizeSecurityGroupIngress'
            - 'ec2:Describe*'
            - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
            - 'elasticloadbalancing:Describe*'
            - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
            - 'elasticloadbalancing:DeregisterTargets'
            - 'elasticloadbalancing:DescribeTargetGroups'
            - 'elasticloadbalancing:DescribeTargetHealth'
            - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-task-execution'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - 'ecs-tasks.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-task-execution'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - 'ecr:GetAuthorizationToken'
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
